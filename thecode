CmltcG9ydCB0aW1lCmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgc2VsZWN0CmE9IlwwMzNbMTszMG0iCmI9IlwwMzNbMTszMW0iCmM9IlwwMzNbMTszMm0iCmQ9IlwwMzNbMTszNG0iCgplPSJcMDMzWzE7MzRtIgpmPSJcMDMzWzE7MzVtIgpnPSJcMDMzWzE7MzZtIgoKCnNweSA9IEZhbHNlCmludml0ZUQ9RmFsc2UKaW52aXRlRT1GYWxzZQpTT0NLU19WRVJTSU9OID0gNQpwYWNrZXQgPWInJwpkZWYgYygpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBnbG9iYWwgc3B5LGludml0ZUUsaW52aXRlRAogICAgICAgIHZhc2Q9aW5wdXQoYisiINij2K/YrtmEICAxINmE2YTYqtis2LPYsyBcMDMzWzE7MzJtINij2K/YrtmEIDIg2YTYqtiv2YXZitixINio2K/YudmI2KkgIFwwMzNbMTszM20g2KPYr9iu2YQgMyDZhNiq2K/ZhdmK2LEg2KjYsdmC2LXYqSAiK2YrItij2YggLTEgLC0yLC0zINmE2KXZhNi62KfYoSDYqtmB2LnZitmEICIpCgogICAgICAgIGlmICcxJyBpbiB2YXNkWzoxXToKICAgICAgICAgICAgc3B5PSBUcnVlCgogICAgICAgICAgICBwcmludCgn2KrZhSDYqtmB2LnZitmEINiq2KzYs9izIDEnKQogICAgICAgIGlmICcyJyBpbiB2YXNkWzoxXToKICAgICAgICAgICAgaW52aXRlRD1UcnVlCgogICAgICAgICAgICBwcmludCgn2KrZhSDYqtmB2LnZitmEINiq2K/ZhdmK2LEg2KjYr9i52YjYqSAgMicpCiAgICAgCiAgICAgICAgaWYgJzMnIGluIHZhc2RbOjFdOgogICAgICAgICAgICBpbnZpdGVFPVRydWUKICAgICAgICAgICAgcHJpbnQoJ9iq2YUg2KrZgdi52YrZhCDYqtiv2YXZitixINio2LHZgti12KkgIDMnKQogICAgCiAgICAgICAgaWYgJy0xJyBpbiB2YXNkWzoyXToKICAgICAgICAgICAgc3B5PSBGYWxzZQoKICAgICAgICAgICAgcHJpbnQoJ9iq2YUg2KfZhNi62KfYoSDYqtmB2LnZitmEIDEnKQogICAKICAgICAgICBpZiAnLTInIGluIHZhc2RbOjJdOgogICAgICAgICAgICBpbnZpdGVEPUZhbHNlCgogICAgICAgICAgICBwcmludCgn2KrZhSDYp9mE2LrYp9ihINiq2YHYudmK2YQyJykKICAgCiAgICAgICAgaWYgJy0zJyBpbiB2YXNkWzoyXToKICAgICAgICAgICAgaW52aXRlRT1GYWxzZQogICAgICAgICAgICBwcmludCgn2KrZhSDYp9mE2LrYp9ihINiq2YHYudmK2YQgMycpCgoKY2xhc3MgUHJveHk6CiAKICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICBzZWxmLnVzZXJuYW1lID0gIndlc2FtIgogICAgICAgIHNlbGYucGFzc3dvcmQgPSAiM21rIgogICAgICAgIHNlbGYucGFja2V0ID0gYicnCiAgICAgICAgc2VsZi5zZW5kbW9kZSA9ICdjbGllbnQtMC0nCgogICAgZGVmIGhhbmRsZV9jbGllbnQoc2VsZiwgY29ubmVjdGlvbik6CgogICAgICAgIHZlcnNpb24sIG5tZXRob2RzID0gY29ubmVjdGlvbi5yZWN2KDIpCgogICAgICAgIG1ldGhvZHMgPSBzZWxmLmdldF9hdmFpbGFibGVfbWV0aG9kcyhubWV0aG9kcywgY29ubmVjdGlvbikKCiAgICAgICAgaWYgMiBub3QgaW4gc2V0KG1ldGhvZHMpOgoKICAgICAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpCiAgICAgICAgICAgIHJldHVybgoKICAgICAgICBjb25uZWN0aW9uLnNlbmRhbGwoYnl0ZXMoW1NPQ0tTX1ZFUlNJT04sIDJdKSkKCiAgICAgICAgaWYgbm90IHNlbGYudmVyaWZ5X2NyZWRlbnRpYWxzKGNvbm5lY3Rpb24pOgogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgdmVyc2lvbiwgY21kLCBfLCBhZGRyZXNzX3R5cGUgPSBjb25uZWN0aW9uLnJlY3YoNCkKCiAgICAgICAgaWYgYWRkcmVzc190eXBlID09IDE6CiAgICAgICAgICAgIGFkZHJlc3MgPSBzb2NrZXQuaW5ldF9udG9hKGNvbm5lY3Rpb24ucmVjdig0KSkKICAgICAgICBlbGlmIGFkZHJlc3NfdHlwZSA9PSAzOgogICAgICAgICAgICBkb21haW5fbGVuZ3RoID0gY29ubmVjdGlvbi5yZWN2KDEpWzBdCiAgICAgICAgICAgIGFkZHJlc3MgPSBjb25uZWN0aW9uLnJlY3YoZG9tYWluX2xlbmd0aCkKICAgICAgICAgICAgYWRkcmVzcyA9IHNvY2tldC5nZXRob3N0YnluYW1lKGFkZHJlc3MpCiAgICAgICAgICAgIG5hbWU9IHNvY2tldC5nZXRob3N0bmFtZShhZGRyZXNzKQoKICAgICAgICBwb3J0ID0gaW50LmZyb21fYnl0ZXMoY29ubmVjdGlvbi5yZWN2KDIpLCAnYmlnJywgc2lnbmVkPUZhbHNlKQogICAgICAgIHBvcnQyID0gcG9ydAogICAgICAgIHRyeToKICAgICAgICAgICAgaWYgY21kID09IDE6CiAgICAgICAgICAgICAgICByZW1vdGUgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgICAgICAgICByZW1vdGUuY29ubmVjdCgoYWRkcmVzcywgcG9ydCkpCiAgICAgICAgICAgICAgICBiaW5kX2FkZHJlc3MgPSByZW1vdGUuZ2V0c29ja25hbWUoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpCgogICAgICAgICAgICBhZGRyID0gaW50LmZyb21fYnl0ZXMoc29ja2V0LmluZXRfYXRvbigKICAgICAgICAgICAgICAgIGJpbmRfYWRkcmVzc1swXSksICdiaWcnLCBzaWduZWQ9RmFsc2UpCiAgICAgICAgICAgIHBvcnQgPSBiaW5kX2FkZHJlc3NbMV0KCiAgICAgICAgICAgIHJlcGx5ID0gYicnLmpvaW4oWwogICAgICAgICAgICAgICAgU09DS1NfVkVSU0lPTi50b19ieXRlcygxLCAnYmlnJyksCiAgICAgICAgICAgICAgICBpbnQoMCkudG9fYnl0ZXMoMSwgJ2JpZycpLAogICAgICAgICAgICAgICAgaW50KDApLnRvX2J5dGVzKDEsICdiaWcnKSwKICAgICAgICAgICAgICAgIGludCgxKS50b19ieXRlcygxLCAnYmlnJyksCiAgICAgICAgICAgICAgICBhZGRyLnRvX2J5dGVzKDQsICdiaWcnKSwKICAgICAgICAgICAgICAgIHBvcnQudG9fYnl0ZXMoMiwgJ2JpZycpCgogICAgICAgICAgICBdKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKCiAgICAgICAgICAgIHJlcGx5ID0gc2VsZi5nZW5lcmF0ZV9mYWlsZWRfcmVwbHkoYWRkcmVzc190eXBlLCA1KQogICAgICAgICAgICBwcmludCgnZmFpbGQnKQoKICAgICAgICBjb25uZWN0aW9uLnNlbmRhbGwocmVwbHkpCgogICAgICAgIGlmIHJlcGx5WzFdID09IDAgYW5kIGNtZCA9PSAxOgogICAgICAgICAgICBzZWxmLmV4Y2hhbmdlX2xvb3AoY29ubmVjdGlvbiwgcmVtb3RlLCBhZGRyZXNzLCBwb3J0MikKICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCkKCiAgICBkZWYgZ2VuZXJhdGVfZmFpbGVkX3JlcGx5KHNlbGYsIGFkZHJlc3NfdHlwZSwgZXJyb3JfbnVtYmVyKToKICAgICAgICByZXR1cm4gYicnLmpvaW4oWwogICAgICAgICAgICBTT0NLU19WRVJTSU9OLnRvX2J5dGVzKDEsICdiaWcnKSwKICAgICAgICAgICAgZXJyb3JfbnVtYmVyLnRvX2J5dGVzKDEsICdiaWcnKSwKICAgICAgICAgICAgaW50KDApLnRvX2J5dGVzKDEsICdiaWcnKSwKICAgICAgICAgICAgYWRkcmVzc190eXBlLnRvX2J5dGVzKDEsICdiaWcnKSwKICAgICAgICAgICAgaW50KDApLnRvX2J5dGVzKDQsICdiaWcnKSwKICAgICAgICAgICAgaW50KDApLnRvX2J5dGVzKDQsICdiaWcnKQogICAgICAgIF0pCgogICAgZGVmIHZlcmlmeV9jcmVkZW50aWFscyhzZWxmLCBjb25uZWN0aW9uKToKICAgICAgICB2ZXJzaW9uID0gb3JkKGNvbm5lY3Rpb24ucmVjdigxKSkKCiAgICAgICAgdXNlcm5hbWVfbGVuID0gb3JkKGNvbm5lY3Rpb24ucmVjdigxKSkKICAgICAgICB1c2VybmFtZSA9IGNvbm5lY3Rpb24ucmVjdih1c2VybmFtZV9sZW4pLmRlY29kZSgndXRmLTgnKQoKICAgICAgICBwYXNzd29yZF9sZW4gPSBvcmQoY29ubmVjdGlvbi5yZWN2KDEpKQogICAgICAgIHBhc3N3b3JkID0gY29ubmVjdGlvbi5yZWN2KHBhc3N3b3JkX2xlbikuZGVjb2RlKCd1dGYtOCcpCgogICAgICAgIGlmIHVzZXJuYW1lID09IHNlbGYudXNlcm5hbWUgYW5kIHBhc3N3b3JkID09IHNlbGYucGFzc3dvcmQ6CgogICAgICAgICAgICByZXNwb25zZSA9IGJ5dGVzKFt2ZXJzaW9uLCAwXSkKICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kYWxsKHJlc3BvbnNlKQogICAgICAgICAgICByZXR1cm4gVHJ1ZQoKICAgICAgICByZXNwb25zZSA9IGJ5dGVzKFt2ZXJzaW9uLCAweEZGXSkKICAgICAgICBjb25uZWN0aW9uLnNlbmRhbGwocmVzcG9uc2UpCiAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpCiAgICAgICAgcmV0dXJuIEZhbHNlCgogICAgZGVmIGdldF9hdmFpbGFibGVfbWV0aG9kcyhzZWxmLCBubWV0aG9kcywgY29ubmVjdGlvbik6CiAgICAgICAgbWV0aG9kcyA9IFtdCiAgICAgICAgZm9yIGkgaW4gcmFuZ2Uobm1ldGhvZHMpOgogICAgICAgICAgICBtZXRob2RzLmFwcGVuZChvcmQoY29ubmVjdGlvbi5yZWN2KDEpKSkKICAgICAgICByZXR1cm4gbWV0aG9kcwoKICAgIGRlZiBydW4oc2VsZiwgaG9zdCwgcG9ydCk6CiAgICAgICAgdmFyID0gMCAKICAgICAgICBzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQogICAgICAgIHMuYmluZCgoaG9zdCwgcG9ydCkpCiAgICAgICAgcy5saXN0ZW4oKQoKICAgICAgICBwcmludCgiIFsgZnJlZSBmaXJlIHBheXRob24gYm90ICAgXSBbeW91ciBpcCB7fV06WyB0aGUgcG9ydCB7fV0iLmZvcm1hdChob3N0LCBwb3J0KSkKICAgICAgICBwcmludChkKycgICcpCiAgICAgICAgcHJpbnQoIiBbIGZyZWUgZmlyZSBwYXl0aG9uIGJvdCAgIF0gW3lvdXIgaXAge31dOlsgdGhlIHBvcnQge31dIi5mb3JtYXQoaG9zdCwgcG9ydCkpCiAgICAgICAgCiAgICAgICAgcHJpbnQoZCsnICAnKQogICAgCiAgICAgICAgcHJpbnQoYisnICAgICAgINmE2Kcg2KrYs9iq2K7Yr9mFINin2YTYqNmI2Kog2LnZhNinINit2LPYp9io2YMg2KfZhNij2LPYp9iz2Yog2YTYqtmB2KfYr9mKINin2YTYqNmG2K8gICcpCiAgICAgICAgcHJpbnQoZCsnICAnKQogICAgICAgIHByaW50KGcrJyAgICAgICAgICAgREVWTE9QRVIgOiB3ZXNhbSBPWUInKQogICAgICAgIAogICAgICAgIHByaW50KGcrJyAxICcpCiAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgcHJpbnQoZysnICAgICAgICAgICBZT1VUVUIgVVNFUiA6IG95Yl8nKQogICAgICAgIAogICAgICAgIHByaW50KGErJyAyJykgICAgIAogICAgICAgICAgICAgICAgIAogICAgICAgIHByaW50KGQrJyAgICAgICAgICAgVEVMRUdSQU0gQ0FOQUwgOmh0dHBzOi8vdC5tZS9veWJjcmV3Y2gnKQogICAKICAgICAgICBwcmludChmKycgMyAnKQogICAgICAgICAgICAKICAgICAgICBwcmludChkKycgICAgICAgICAgIFRFTEVHUkFNIEdST1VQIDogaHR0cHM6Ly90Lm1lL2lhbW95YicpCiAgICAgICAgcHJpbnQoZCsnIDQgJykKICAgICAgICBwcmludChkKyfZh9mD2LEg2LXZhti5INio2YjYp9iz2LfZhyDZiNiz2KfZhSBveWInKQogICAgICAgIAogICAgICAgIHByaW50KGQrJyAgICAgICAgICAgV0hBVFNBUFAgOiBodHRwczovL3dhLm1lLys5Njc3NzIyNDE2MDInKQogICAgICAgICAgCiAgICAgICAgICAKICAgICAgICBwcmludChkKycgICAgICAgICAgIElOU1RBR1JBTSA6IG95YjBpJykKICAgICAgICAgIAogICAgICAgICAgCiAgICAgICAgcHJpbnQoZCsnICAgICAgICAgICBESVNDT1JEIDogb3liX3NhZCcpCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICBwcmludChkKycgICcpCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgaWYgdmFyID09MDoKICAgICAgICAgICAgCgogICAgICAgICAgICB2ID0gdGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9YywgYXJncz0oKSkKICAgICAgICAgICAgdi5zdGFydCgpCiAgICAgICAgdmFyID0gdmFyKzEKICAgICAgICAKICAgICAgICAKCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgICAgICBjb25uLCBhZGRyID0gcy5hY2NlcHQoKQogICAgICAgICAgIAogICAgICAgICAgICBydW5uaW5nID0gRmFsc2UKCiAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1zZWxmLmhhbmRsZV9jbGllbnQsIGFyZ3M9KGNvbm4sKSkKICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgCgojCiAgICBkZWYgZXhjaGFuZ2VfbG9vcChzZWxmLCBjbGllbnQsIHJlbW90ZSwgYWRkcmVzcywgcG9ydCk6CiAgICAgICAgd2hpbGUgVHJ1ZToKCiAgICAgICAgICAgIHIsIHcsIGUgPSBzZWxlY3Quc2VsZWN0KFtjbGllbnQsIHJlbW90ZV0sIFtdLCBbXSkKCiAgICAgICAgICAgIGlmIGNsaWVudCBpbiByIG9yIHJlbW90ZSBpbiByOgogICAgICAgICAgICAgICAgaWYgY2xpZW50IGluIHI6CiAgICAgICAgICAgICAgICAgICAgZGF0YUMgPSBjbGllbnQucmVjdig0MDk2KQogICAgICAgICAgICAgICAgICAgIGdsb2JhbCBoaWRlCiAgICAgICAgICAgICAgICAgICAgaGlkZSA9Tm9uZQogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmICcwNTE1JyBpbiBkYXRhQy5oZXgoKVswOjRdIGFuZCBsZW4oZGF0YUMuaGV4KCkpID49ODIwIGFuZCBpbnZpdGVEPT1UcnVlICA6CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMSk6CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoNTApOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcj0gdmFyKzEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnICJcMDMzWzE7MzNtIiAgc2VuZGluZyAgIlwwMzNbMTszMW0iYSBbe31dICJcMDMzWzE7MzRtIiBwYWNsZXQgJy5mb3JtYXQodmFyKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDAxMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZSgxMCk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdGUuc2VuZChkYXRhQykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQogICAgICAKCiAgICAgICAgICAgICAgICAgICAgaWYgJzA1MTUnIGluIGRhdGFDLmhleCgpWzA6NF0gYW5kIGxlbihkYXRhQy5oZXgoKSkgPj0gMTQxOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnRE9ORScpCiAgICAgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZSA9IFRydWUKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQobGVuKGRhdGFDLmhleCgpKSkKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZGF0YUMuaGV4KCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGhpZGUgPT0gVHJ1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdoaWRlIGlzIHRydWUgJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgI2ludml0ZUUKICAgICAgICAgICAgICAgICAgICBpZiAnMDUxNScgaW4gZGF0YUMuaGV4KClbMDo0XSBhbmQgbGVuKGRhdGFDLmhleCgpKSA9PTEwOCBvciAgbGVuKGRhdGFDLmhleCgpKSA9PTEwOCBhbmQgaGlkZSA9PVRydWUgYW5kIGludml0ZUU9PVRydWU6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCd3YWl0ICcpCiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGUgPUZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDUwMCk6CiAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDEwKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZS5zZW5kKGRhdGFDKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmICcwNTE1JyBpbiBkYXRhQy5oZXgoKVswOjRdIGFuZCBsZW4oZGF0YUMuaGV4KCkpID09MTQwIG9yICBsZW4oZGF0YUMuaGV4KCkpID09MTQwIGFuZCBoaWRlID09VHJ1ZSBhbmQgaW52aXRlRT09VHJ1ZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ3dhaXQgJykKICAgICAgICAgICAgICAgICAgICAgICAgaGlkZSA9RmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoNTAwKToKICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDEwKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW90ZS5zZW5kKGRhdGFDKQoKICAgICAgICAgICAgICAgICAgICBpZiByZW1vdGUuc2VuZChkYXRhQykgPD0gMDoKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGlmIHJlbW90ZSBpbiByOgogICAgICAgICAgICAgICAgICAgIGRhdGFTID0gcmVtb3RlLnJlY3YoNDA5NikKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiAgJzA1MDAnIGluIGRhdGFTLmhleCgpWzA6NF0gYW5kIGhpZGUgPT0gVHJ1ZToKICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIHBhY2tldAogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oZGF0YVMuaGV4KCkpPD0zMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJwYWNrZXQgaXMgbm90IFRydWUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZSA9VHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oZGF0YVMuaGV4KCkpPj0zMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2tldCA9IGRhdGFTCiAgICAKICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1t7fV0nLmZvcm1hdChwYWNrZXQuaGV4KCkpKQogICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlID0gRmFsc2UKICAgICAgICAgICAgICAgICAgICBpZiAgJzBmMDAnIGluIGRhdGFTLmhleCgpWzA6NF0gYW5kIHNweT09VHJ1ZSA6CgogICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50LnNlbmQocGFja2V0KQoKICAgICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgICAgaWYgY2xpZW50LnNlbmQoZGF0YVMpIDw9IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCgoKCnZhcnNzID0gc29ja2V0LmdldGhvc3RieW5hbWUoc29ja2V0LmdldGhvc3RuYW1lKCkpCgpQcm94eSgpLnJ1bih2YXJzcywyMDA5KQoKCiAgICAKICAgIAo=
وعلهحيتخ
